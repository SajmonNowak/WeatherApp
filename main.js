(()=>{"use strict";var __webpack_modules__={128:()=>{eval('\n;// CONCATENATED MODULE: ./src/modules/WeatherAPI.js\nconst APIKey = "d00251ce110d25d4425b2eede28a4a09";\n\nasync function getWeatherInfo(weatherData, mode) {\n  const lat = weatherData.lat;\n  const lng = weatherData.lng;\n\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${APIKey}&units=${mode}`\n  );\n  const data = await response.json();\n\n  return data;\n}\n\n/* harmony default export */ const WeatherAPI = (getWeatherInfo);\n\n;// CONCATENATED MODULE: ./src/modules/GeocodingAPI.js\nconst GeocodingAPI_APIKey = "d00251ce110d25d4425b2eede28a4a09";\n\n\nasync function getCoordinates(city) {\n  const response = await fetch(\n    `http://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=${GeocodingAPI_APIKey}`\n  );\n  const data = await response.json();\n  return data[0];\n}\n\n;// CONCATENATED MODULE: ./src/modules/WeatherData.js\nclass WeatherData {\n  constructor() {\n    this.city = "";\n    this.county = "";\n    this.lng = "";\n    this.lat = "";\n    this.current = {\n      temp: "",\n      desc: "",\n      humidity: "",\n      feel: "",\n      windspeed: "",\n      rain: "",\n      id: "",\n    };\n    this.hourly = [];\n    this.daily = [];\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/requiredArgs/index.js\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + \' argument\' + (required > 1 ? \'s\' : \'\') + \' required, but only \' + args.length + \' present\');\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/toDate/index.js\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === \'object\' && argStr === \'[object Date]\') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === \'number\' || argStr === \'[object Number]\') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === \'string\' || argStr === \'[object String]\') && typeof console !== \'undefined\') {\n      // eslint-disable-next-line no-console\n      console.warn("Starting with v2.0.0-beta.1 date-fns doesn\'t accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/toInteger/index.js\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/fromUnixTime/index.js\n\n\n\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * var result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nfunction fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/getHours/index.js\n\n\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nfunction getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}\n;// CONCATENATED MODULE: ./src/modules/weatherIcons.js\n/* harmony default export */ const weatherIcons = ({\n    "200": {\n      "label": "thunderstorm with light rain",\n      "icon": "storm-showers"\n    },\n  \n    "201": {\n      "label": "thunderstorm with rain",\n      "icon": "storm-showers"\n    },\n  \n    "202": {\n      "label": "thunderstorm with heavy rain",\n      "icon": "storm-showers"\n    },\n  \n    "210": {\n      "label": "light thunderstorm",\n      "icon": "storm-showers"\n    },\n  \n    "211": {\n      "label": "thunderstorm",\n      "icon": "thunderstorm"\n    },\n  \n    "212": {\n      "label": "heavy thunderstorm",\n      "icon": "thunderstorm"\n    },\n  \n    "221": {\n      "label": "ragged thunderstorm",\n      "icon": "thunderstorm"\n    },\n  \n    "230": {\n      "label": "thunderstorm with light drizzle",\n      "icon": "storm-showers"\n    },\n  \n    "231": {\n      "label": "thunderstorm with drizzle",\n      "icon": "storm-showers"\n    },\n  \n    "232": {\n      "label": "thunderstorm with heavy drizzle",\n      "icon": "storm-showers"\n    },\n  \n    "300": {\n      "label": "light intensity drizzle",\n      "icon": "sprinkle"\n    },\n  \n    "301": {\n      "label": "drizzle",\n      "icon": "sprinkle"\n    },\n  \n    "302": {\n      "label": "heavy intensity drizzle",\n      "icon": "sprinkle"\n    },\n  \n    "310": {\n      "label": "light intensity drizzle rain",\n      "icon": "sprinkle"\n    },\n  \n    "311": {\n      "label": "drizzle rain",\n      "icon": "sprinkle"\n    },\n  \n    "312": {\n      "label": "heavy intensity drizzle rain",\n      "icon": "sprinkle"\n    },\n  \n    "313": {\n      "label": "shower rain and drizzle",\n      "icon": "sprinkle"\n    },\n  \n    "314": {\n      "label": "heavy shower rain and drizzle",\n      "icon": "sprinkle"\n    },\n  \n    "321": {\n      "label": "shower drizzle",\n      "icon": "sprinkle"\n    },\n  \n    "500": {\n      "label": "light rain",\n      "icon": "rain"\n    },\n  \n    "501": {\n      "label": "moderate rain",\n      "icon": "rain"\n    },\n  \n    "502": {\n      "label": "heavy intensity rain",\n      "icon": "rain"\n    },\n  \n    "503": {\n      "label": "very heavy rain",\n      "icon": "rain"\n    },\n  \n    "504": {\n      "label": "extreme rain",\n      "icon": "rain"\n    },\n  \n    "511": {\n      "label": "freezing rain",\n      "icon": "rain-mix"\n    },\n  \n    "520": {\n      "label": "light intensity shower rain",\n      "icon": "showers"\n    },\n  \n    "521": {\n      "label": "shower rain",\n      "icon": "showers"\n    },\n  \n    "522": {\n      "label": "heavy intensity shower rain",\n      "icon": "showers"\n    },\n  \n    "531": {\n      "label": "ragged shower rain",\n      "icon": "showers"\n    },\n  \n    "600": {\n      "label": "light snow",\n      "icon": "snow"\n    },\n  \n    "601": {\n      "label": "snow",\n      "icon": "snow"\n    },\n  \n    "602": {\n      "label": "heavy snow",\n      "icon": "snow"\n    },\n  \n    "611": {\n      "label": "sleet",\n      "icon": "sleet"\n    },\n  \n    "612": {\n      "label": "shower sleet",\n      "icon": "sleet"\n    },\n  \n    "615": {\n      "label": "light rain and snow",\n      "icon": "rain-mix"\n    },\n  \n    "616": {\n      "label": "rain and snow",\n      "icon": "rain-mix"\n    },\n  \n    "620": {\n      "label": "light shower snow",\n      "icon": "rain-mix"\n    },\n  \n    "621": {\n      "label": "shower snow",\n      "icon": "rain-mix"\n    },\n  \n    "622": {\n      "label": "heavy shower snow",\n      "icon": "rain-mix"\n    },\n  \n    "701": {\n      "label": "mist",\n      "icon": "sprinkle"\n    },\n  \n    "711": {\n      "label": "smoke",\n      "icon": "smoke"\n    },\n  \n    "721": {\n      "label": "haze",\n      "icon": "day-haze"\n    },\n  \n    "731": {\n      "label": "sand, dust whirls",\n      "icon": "cloudy-gusts"\n    },\n  \n    "741": {\n      "label": "fog",\n      "icon": "fog"\n    },\n  \n    "751": {\n      "label": "sand",\n      "icon": "cloudy-gusts"\n    },\n  \n    "761": {\n      "label": "dust",\n      "icon": "dust"\n    },\n  \n    "762": {\n      "label": "volcanic ash",\n      "icon": "smog"\n    },\n  \n    "771": {\n      "label": "squalls",\n      "icon": "day-windy"\n    },\n  \n    "781": {\n      "label": "tornado",\n      "icon": "tornado"\n    },\n  \n    "800": {\n      "label": "clear sky",\n      "icon": "sunny"\n    },\n  \n    "801": {\n      "label": "few clouds",\n      "icon": "cloudy"\n    },\n  \n    "802": {\n      "label": "scattered clouds",\n      "icon": "cloudy"\n    },\n  \n    "803": {\n      "label": "broken clouds",\n      "icon": "cloudy"\n    },\n  \n    "804": {\n      "label": "overcast clouds",\n      "icon": "cloudy"\n    },\n  \n  \n    "900": {\n      "label": "tornado",\n      "icon": "tornado"\n    },\n  \n    "901": {\n      "label": "tropical storm",\n      "icon": "hurricane"\n    },\n  \n    "902": {\n      "label": "hurricane",\n      "icon": "hurricane"\n    },\n  \n    "903": {\n      "label": "cold",\n      "icon": "snowflake-cold"\n    },\n  \n    "904": {\n      "label": "hot",\n      "icon": "hot"\n    },\n  \n    "905": {\n      "label": "windy",\n      "icon": "windy"\n    },\n  \n    "906": {\n      "label": "hail",\n      "icon": "hail"\n    },\n  \n    "951": {\n      "label": "calm",\n      "icon": "sunny"\n    },\n  \n    "952": {\n      "label": "light breeze",\n      "icon": "cloudy-gusts"\n    },\n  \n    "953": {\n      "label": "gentle breeze",\n      "icon": "cloudy-gusts"\n    },\n  \n    "954": {\n      "label": "moderate breeze",\n      "icon": "cloudy-gusts"\n    },\n  \n    "955": {\n      "label": "fresh breeze",\n      "icon": "cloudy-gusts"\n    },\n  \n    "956": {\n      "label": "strong breeze",\n      "icon": "cloudy-gusts"\n    },\n  \n    "957": {\n      "label": "high wind, near gale",\n      "icon": "cloudy-gusts"\n    },\n  \n    "958": {\n      "label": "gale",\n      "icon": "cloudy-gusts"\n    },\n  \n    "959": {\n      "label": "severe gale",\n      "icon": "cloudy-gusts"\n    },\n  \n    "960": {\n      "label": "storm",\n      "icon": "thunderstorm"\n    },\n  \n    "961": {\n      "label": "violent storm",\n      "icon": "thunderstorm"\n    },\n  \n    "962": {\n      "label": "hurricane",\n      "icon": "cloudy-gusts"\n    }\n  });\n;// CONCATENATED MODULE: ./src/modules/helper.js\n\n\n\nfunction convertToHour(unix) {\n  const date = fromUnixTime(unix);\n  const hour = getHours(date);\n  return hour;\n}\n\nfunction convertToDay(unix) {\n  const date = fromUnixTime(unix);\n  const day = date.toString().substring(0, 3);\n  return day;\n}\n\nfunction getIcon(data) {\n  const prefix = "wi-";\n  const code = data.id;\n  let icon = weatherIcons[code].icon;\n\n  if (!(code > 699 && code < 800) && !(code > 899 && code < 1000)) {\n    icon = "day-" + icon;\n  }\n\n  icon = prefix + icon;\n  return icon;\n}\n\n\n\n;// CONCATENATED MODULE: ./src/modules/UI.js\n\n\n\nclass UI {\n  weatherData = "";\n\n  static initButtons() {\n    const tempDiv = document.getElementById("tempDiv");\n    const cityDiv = document.getElementById("city");\n    const searchIcon = document.getElementById("searchIcon");\n    const hourlyBtn = document.getElementById("hourlyBtn");\n    const weekBtn = document.getElementById("weekBtn");\n\n    tempDiv.addEventListener("click", UI.showSearchBar);\n    cityDiv.addEventListener("click", UI.showSearchBar);\n    searchIcon.addEventListener("click", async () => {\n      let data = await modules_APP.handleRequest();\n      UI.weatherData = data;\n    });\n    hourlyBtn.addEventListener("click", UI.showHourlyData);\n    weekBtn.addEventListener("click", UI.showWeekData);\n  }\n\n  static showSearchBar() {\n    const searchBar = document.querySelector(".inputDiv");\n    if (searchBar.classList.contains("active")) {\n      UI.closeSearchBar();\n      return;\n    } else {\n      searchBar.classList.add("active");\n    }\n  }\n\n  static closeSearchBar() {\n    const searchBar = document.querySelector(".inputDiv");\n\n    searchBar.classList.remove("active");\n  }\n\n  static copyCity() {\n    const cityInput = document.getElementById("cityInput");\n\n    return cityInput.value;\n  }\n\n  static fillMainData(data) {\n    const tempDiv = document.querySelector(".mainTemp");\n    const cityDiv = document.getElementById("city");\n    const countryDiv = document.getElementById("country");\n    const description = document.getElementById("desc");\n    const tempIcon = document.getElementById("mainTempIcon");\n\n    cityDiv.textContent = data.city;\n    countryDiv.textContent = data.country;\n    tempDiv.textContent = data.current.temp;\n    description.textContent = data.current.desc;\n\n    UI.changeIcon(tempIcon, data.current);\n  }\n\n  static fillHourlyData(data) {\n    const infoPanel = document.querySelector(".infoPanel");\n    infoPanel.innerHTML = "";\n\n    for (let i = 0; i < 5; i++) {\n      let weatherDiv = UI.createInfoPanelDiv(data.hourly[i]);\n      infoPanel.appendChild(weatherDiv);\n    }\n  }\n\n  static createInfoPanelDiv(data) {\n    const weatherDiv = document.createElement("div");\n    const timeDiv = document.createElement("div");\n    const infoPanelDiv = document.createElement("div");\n    const mainTemp = document.createElement("div");\n    const minmax = document.createElement("div");\n    const weatherIcon = document.createElement("i");\n    const pop = document.createElement("div");\n\n    weatherDiv.classList.add("weatherDiv");\n    timeDiv.classList.add("timeDiv");\n    infoPanelDiv.classList.add("infoPanelTemp");\n    minmax.classList.add("minmax");\n    weatherIcon.id = "tempIcon";\n    UI.changeIcon(weatherIcon, data);\n    pop.classList.add("pop");\n\n    timeDiv.textContent = data.time;\n    mainTemp.textContent = data.temp;\n    pop.textContent = data.pop;\n\n    infoPanelDiv.append(mainTemp, minmax);\n    weatherDiv.append(timeDiv, infoPanelDiv, weatherIcon, pop);\n\n    return weatherDiv;\n  }\n\n  static showHourlyData() {\n    console.log(UI.weatherData);\n  }\n\n  static changeIcon(iconDiv, data) {\n    iconDiv.className = "";\n\n    const className = getIcon(data).toString();\n    iconDiv.classList.add("wi", className);\n  }\n}\n\n;// CONCATENATED MODULE: ./src/modules/APP.js\n\n\n\n\n\n\nconst APP = (() => {\n  const initialiseApp = () => {\n    UI.initButtons();\n    handleRequest("Bochum");\n  };\n\n  const handleRequest = async (city) => {\n    if (city == undefined) {\n      city = UI.copyCity();\n      UI.closeSearchBar();\n    }\n    const weatherData = await createWeatherObject(city);\n    UI.fillMainData(weatherData);\n    UI.fillHourlyData(weatherData);\n\n    return weatherData;\n  };\n\n  const createWeatherObject = async (city) => {\n    const weatherData = new WeatherData();\n    await fillGeoCodingInfo(weatherData, city);\n    await fillWeatherInfo(weatherData);\n\n    return weatherData;\n  };\n\n  const fillGeoCodingInfo = async (weatherData, city) => {\n    const data = await getCoordinates(city);\n\n    weatherData.city = data.name;\n    weatherData.country = " (" + data.country + ")";\n    weatherData.lat = data.lat;\n    weatherData.lng = data.lon;\n  };\n\n  const fillWeatherInfo = async (weatherData) => {\n    const data = await WeatherAPI(weatherData, "metric");\n\n    fillCurrentInfo(weatherData.current, data.current);\n    fillHourlyInfo(weatherData.hourly, data.hourly);\n    fillDailyInfo(weatherData.daily, data.daily);\n  };\n\n  const fillCurrentInfo = (current, data) => {\n    current.temp = Math.round(data.temp) + "°";\n    current.desc = data.weather[0].description;\n    current.id = data.weather[0].id;\n    current.humidity = data.humidity;\n    current.feel = data.feels_like;\n    current.windspeed = data.wind_speed;\n  };\n\n  const fillHourlyInfo = (hourly, data) => {\n    for (let i = 1; i < 7; i++) {\n      const info = {\n        temp: Math.round(data[i].temp) + "°",\n        desc: data[i].weather[0].description,\n        pop: data[i].pop,\n        time: convertToHour(data[i].dt),\n        id: data[i].weather[0].id,\n      };\n\n      hourly.push(info);\n    }\n  };\n\n  const fillDailyInfo = (daily, data) => {\n    for (let i = 1; i < 7; i++) {\n      const info = {\n        tempDay: Math.round(data[i].temp.day),\n        max: Math.round(data[i].temp.max),\n        min: Math.round(data[i].temp.min),\n        day: convertToDay(data[i].dt),\n        desc: data[i].weather[0].description,\n        pop: data[i].pop,\n      };\n\n      daily.push(info);\n    }\n  };\n\n  return { initialiseApp, handleRequest };\n})();\n\n/* harmony default export */ const modules_APP = (APP);\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\ndocument.addEventListener("DOMContentLoaded", modules_APP.initialiseApp);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///128\n')}},__webpack_exports__={};__webpack_modules__[128]()})();