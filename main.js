(()=>{"use strict";var __webpack_modules__={355:()=>{eval('\n;// CONCATENATED MODULE: ./src/modules/WeatherAPI.js\nconst APIKey = "d00251ce110d25d4425b2eede28a4a09";\n\nasync function getWeatherInfo(weatherData, mode) {\n  const lat = weatherData.lat;\n  const lng = weatherData.lng;\n\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${APIKey}&units=${mode}`\n  );\n  const data = await response.json();\nconsole.log(data);\n  return data;\n}\n\n/* harmony default export */ const WeatherAPI = (getWeatherInfo);\n\n;// CONCATENATED MODULE: ./src/modules/GeocodingAPI.js\nconst GeocodingAPI_APIKey = "d00251ce110d25d4425b2eede28a4a09";\n\nasync function getCoordinates(city) {\n  const response = await fetch(\n    `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=${GeocodingAPI_APIKey}`\n  );\n  const data = await response.json();\n  return data[0];\n}\n\n;// CONCATENATED MODULE: ./src/modules/WeatherData.js\nclass WeatherData {\n  constructor() {\n    this.city = "";\n    this.county = "";\n    this.lng = "";\n    this.lat = "";\n    this.current = {\n      temp: "",\n      desc: "",\n      humidity: "",\n      feel: "",\n      windspeed: "",\n      rain: "",\n      id: "",\n    };\n    this.hourly = [];\n    this.daily = [];\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/requiredArgs/index.js\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + \' argument\' + (required > 1 ? \'s\' : \'\') + \' required, but only \' + args.length + \' present\');\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/toDate/index.js\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === \'object\' && argStr === \'[object Date]\') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === \'number\' || argStr === \'[object Number]\') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === \'string\' || argStr === \'[object String]\') && typeof console !== \'undefined\') {\n      // eslint-disable-next-line no-console\n      console.warn("Starting with v2.0.0-beta.1 date-fns doesn\'t accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/toInteger/index.js\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/fromUnixTime/index.js\n\n\n\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * var result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nfunction fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}\n;// CONCATENATED MODULE: ./node_modules/date-fns/esm/getHours/index.js\n\n\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nfunction getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}\n;// CONCATENATED MODULE: ./src/modules/Icons.js\nconst iconNames = {\n  200: "thunderstorm",\n  201: "thunderstorm",\n  202: "thunderstorm",\n  210: "lightning",\n  211: "lightning",\n  212: "lightning",\n  221: "lightning",\n  230: "thunderstorm",\n  231: "thunderstorm",\n  232: "thunderstorm",\n  300: "sprinkle",\n  301: "sprinkle",\n  302: "rain",\n  310: "rain-mix",\n  311: "rain",\n  312: "rain",\n  313: "showers",\n  314: "rain",\n  321: "sprinkle",\n  500: "sprinkle",\n  501: "rain",\n  502: "rain",\n  503: "rain",\n  504: "rain",\n  511: "rain-mix",\n  520: "showers",\n  521: "showers",\n  522: "showers",\n  531: "storm-showers",\n  600: "snow",\n  601: "snow",\n  602: "sleet",\n  611: "rain-mix",\n  612: "rain-mix",\n  615: "rain-mix",\n  616: "rain-mix",\n  620: "rain-mix",\n  621: "snow",\n  622: "snow",\n  701: "showers",\n  711: "smoke",\n  721: "day-haze",\n  731: "dust",\n  741: "fog",\n  761: "dust",\n  762: "dust",\n  771: "day-cloudy-gusts",\n  781: "tornado",\n  800: "day-sunny",\n  801: "day-cloudy-gusts",\n  802: "day-cloudy-gusts",\n  803: "day-cloudy-gusts",\n  804: "day-cloudy",\n  900: "tornado",\n  901: "storm-showers",\n  902: "hurricane",\n  903: "snowflake-cold",\n  904: "hot",\n  905: "windy",\n  906: "hail",\n  957: "strong-wind",\n  day201: "day-thunderstorm",\n  day202: "day-thunderstorm",\n  day210: "day-lightning",\n  day211: "day-lightning",\n  day212: "day-lightning",\n  day221: "day-lightning",\n  day230: "day-thunderstorm",\n  day231: "day-thunderstorm",\n  day232: "day-thunderstorm",\n  day300: "day-sprinkle",\n  day301: "day-sprinkle",\n  day302: "day-rain",\n  day310: "day-rain",\n  day311: "day-rain",\n  day312: "day-rain",\n  day313: "day-rain",\n  day314: "day-rain",\n  day321: "day-sprinkle",\n  day500: "day-sprinkle",\n  day501: "day-rain",\n  day502: "day-rain",\n  day503: "day-rain",\n  day504: "day-rain",\n  day511: "day-rain-mix",\n  day520: "day-showers",\n  day521: "day-showers",\n  day522: "day-showers",\n  day531: "day-storm-showers",\n  day600: "day-snow",\n  day601: "day-sleet",\n  day602: "day-snow",\n  day611: "day-rain-mix",\n  day612: "day-rain-mix",\n  day615: "day-rain-mix",\n  day616: "day-rain-mix",\n  day620: "day-rain-mix",\n  day621: "day-snow",\n  day622: "day-snow",\n  day701: "day-showers",\n  day711: "smoke",\n  day721: "day-haze",\n  day731: "dust",\n  day741: "day-fog",\n  day761: "dust",\n  day762: "dust",\n  day781: "tornado",\n  day800: "day-sunny",\n  day801: "day-cloudy-gusts",\n  day802: "day-cloudy-gusts",\n  day803: "day-cloudy-gusts",\n  day804: "day-sunny-overcast",\n  day900: "tornado",\n  day902: "hurricane",\n  day903: "snowflake-cold",\n  day904: "hot",\n  day906: "day-hail",\n  day957: "strong-wind",\n  night200: "night-alt-thunderstorm",\n  night201: "night-alt-thunderstorm",\n  night202: "night-alt-thunderstorm",\n  night210: "night-alt-lightning",\n  night211: "night-alt-lightning",\n  night212: "night-alt-lightning",\n  night221: "night-alt-lightning",\n  night230: "night-alt-thunderstorm",\n  night231: "night-alt-thunderstorm",\n  night232: "night-alt-thunderstorm",\n  night300: "night-alt-sprinkle",\n  night301: "night-alt-sprinkle",\n  night302: "night-alt-rain",\n  night310: "night-alt-rain",\n  night311: "night-alt-rain",\n  night312: "night-alt-rain",\n  night313: "night-alt-rain",\n  night314: "night-alt-rain",\n  night321: "night-alt-sprinkle",\n  night500: "night-alt-sprinkle",\n  night501: "night-alt-rain",\n  night502: "night-alt-rain",\n  night503: "night-alt-rain",\n  night504: "night-alt-rain",\n  night511: "night-alt-rain-mix",\n  night520: "night-alt-showers",\n  night521: "night-alt-showers",\n  night522: "night-alt-showers",\n  night531: "night-alt-storm-showers",\n  night600: "night-alt-snow",\n  night601: "night-alt-sleet",\n  night602: "night-alt-snow",\n  night611: "night-alt-rain-mix",\n  night612: "night-alt-rain-mix",\n  night615: "night-alt-rain-mix",\n  night616: "night-alt-rain-mix",\n  night620: "night-alt-rain-mix",\n  night621: "night-alt-snow",\n  night622: "night-alt-snow",\n  night701: "night-alt-showers",\n  night711: "smoke",\n  night721: "day-haze",\n  night731: "dust",\n  night741: "night-fog",\n  night761: "dust",\n  night762: "dust",\n  night781: "tornado",\n  night800: "night-clear",\n  night801: "night-alt-cloudy-gusts",\n  night802: "night-alt-cloudy-gusts",\n  night803: "night-alt-cloudy-gusts",\n  night804: "night-alt-cloudy",\n  night900: "tornado",\n  night902: "hurricane",\n  night903: "snowflake-cold",\n  night904: "hot",\n  night906: "night-alt-hail",\n  night957: "strong-wind",\n};\n\n/* harmony default export */ const Icons = (iconNames);\n\n;// CONCATENATED MODULE: ./src/modules/helper.js\n\n\n\nfunction convertToHour(unix) {\n  const date = fromUnixTime(unix);\n  let hour = getHours(date);\n\n  if (hour < 12) {\n    hour = hour + " am";\n  } else {\n    hour = hour + " pm";\n  }\n\n  return hour;\n}\n\nfunction convertToDay(unix) {\n  const date = fromUnixTime(unix);\n  const day = date.toString().substring(0, 3);\n  return day;\n}\n\nfunction getIcon(data) {\n  const prefix = "wi-";\n  let iconName = data.id;\n  let icon = prefix + Icons[iconName];\n\n  return icon;\n}\n\n\n\n;// CONCATENATED MODULE: ./src/modules/UI.js\n\n\n\nclass UI {\n  weatherData = "";\n\n  static initButtons() {\n    const tempDiv = document.getElementById("tempDiv");\n    const cityDiv = document.getElementById("city");\n    const searchIcon = document.getElementById("searchIcon");\n    const hourlyBtn = document.getElementById("hourlyBtn");\n    const weekBtn = document.getElementById("weekBtn");\n\n    tempDiv.addEventListener("click", UI.showSearchBar);\n    cityDiv.addEventListener("click", UI.showSearchBar);\n    searchIcon.addEventListener("click", () => {\n      modules_APP.handleRequest();\n    });\n    dayBtn.addEventListener("click", () => {\n      UI.fillHourlyData(UI.weatherData);\n      UI.activateBtn("hourly");\n    });\n    weekBtn.addEventListener("click", () => {\n      UI.fillDailyData(UI.weatherData);\n      UI.activateBtn("daily");\n    });\n  }\n\n  static showSearchBar() {\n    const searchBar = document.querySelector(".inputDiv");\n    if (searchBar.classList.contains("active")) {\n      UI.closeSearchBar();\n      return;\n    } else {\n      searchBar.classList.add("active");\n    }\n  }\n\n  static closeSearchBar() {\n    const searchBar = document.querySelector(".inputDiv");\n\n    searchBar.classList.remove("active");\n  }\n\n  static copyCity() {\n    const cityInput = document.getElementById("cityInput");\n\n    return cityInput.value;\n  }\n\n  static fillMainData(data) {\n    const tempDiv = document.querySelector(".mainTemp");\n    const cityDiv = document.getElementById("city");\n    const countryDiv = document.getElementById("country");\n    const description = document.getElementById("desc");\n    const tempIcon = document.getElementById("mainTempIcon");\n\n    cityDiv.textContent = data.city;\n    countryDiv.textContent = data.country;\n    tempDiv.textContent = data.current.temp;\n    description.textContent = data.current.desc;\n\n    UI.changeIcon(tempIcon, data.current);\n  }\n\n  static fillHourlyData(data) {\n    const infoPanel = document.querySelector(".infoPanel");\n    infoPanel.innerHTML = "";\n\n    for (let i = 0; i < 16; i++) {\n      let hourlyInfoDiv = UI.createInfoPanelDiv(data.hourly[i]);\n      if (i % 2 == 0) {\n        hourlyInfoDiv.classList.add("darkerInfoDiv");\n      }\n      infoPanel.appendChild(hourlyInfoDiv);\n    }\n  }\n\n  static fillDailyData(data) {\n    const infoPanel = document.querySelector(".infoPanel");\n    infoPanel.innerHTML = "";\n    for (let i = 0; i < 6; i++) {\n      let dailyInfoDiv = UI.createInfoPanelDiv(data.daily[i]);\n      if (i % 2 == 0) {\n        dailyInfoDiv.classList.add("darkerInfoDiv");\n      }\n      UI.fillMinMax(dailyInfoDiv, data.daily[i]);\n      infoPanel.appendChild(dailyInfoDiv);\n    }\n  }\n\n  static createInfoPanelDiv(data) {\n    const weatherDiv = document.createElement("div");\n    const timeDiv = document.createElement("div");\n    const infoPanelDiv = document.createElement("div");\n    const mainTemp = document.createElement("div");\n    const minmax = document.createElement("div");\n    const weatherIcon = document.createElement("i");\n    const pop = document.createElement("div");\n\n    weatherDiv.classList.add("weatherDiv");\n    timeDiv.classList.add("timeDiv");\n    infoPanelDiv.classList.add("infoPanelTemp");\n    minmax.classList.add("minmax");\n    mainTemp.classList.add("temp");\n    weatherIcon.id = "tempIcon";\n    UI.changeIcon(weatherIcon, data);\n    pop.classList.add("pop");\n\n    timeDiv.textContent = data.time;\n    mainTemp.textContent = data.temp;\n    pop.textContent = data.pop;\n\n    infoPanelDiv.append(mainTemp, minmax);\n    weatherDiv.append(timeDiv, infoPanelDiv, weatherIcon, pop);\n\n    return weatherDiv;\n  }\n\n  static fillMinMax(div, data) {\n    const mDiv = div.querySelector(".minmax");\n\n    mDiv.textContent = data.min + " / " + data.max;\n  }\n\n  static activateBtn(btn) {\n    const activeBtn = document.querySelector(".activeOption");\n    activeBtn.classList.remove("activeOption");\n\n    if (btn == "hourly") {\n      const dayBtn = document.getElementById("dayBtn");\n      dayBtn.classList.add("activeOption");\n    } else {\n      const weekBtn = document.getElementById("weekBtn");\n      weekBtn.classList.add("activeOption");\n    }\n  }\n\n  static changeIcon(iconDiv, data) {\n    iconDiv.className = "";\n\n    const className = getIcon(data).toString();\n    iconDiv.classList.add("wi", className);\n  }\n}\n\n;// CONCATENATED MODULE: ./src/modules/APP.js\n\n\n\n\n\n\nconst APP = (() => {\n  const initialiseApp = () => {\n    UI.initButtons();\n    handleRequest("Bochum");\n  };\n\n  const handleRequest = async (city) => {\n    if (city == undefined) {\n      city = UI.copyCity();\n      UI.closeSearchBar();\n    }\n    const weatherData = await createWeatherObject(city);\n    UI.fillMainData(weatherData);\n    UI.fillHourlyData(weatherData);\n    UI.weatherData = weatherData;\n  };\n\n  const createWeatherObject = async (city) => {\n    const weatherData = new WeatherData();\n    await fillGeoCodingInfo(weatherData, city);\n    await fillWeatherInfo(weatherData);\n\n    return weatherData;\n  };\n\n  const fillGeoCodingInfo = async (weatherData, city) => {\n    const data = await getCoordinates(city);\n\n    weatherData.city = data.name;\n    weatherData.country = " (" + data.country + ")";\n    weatherData.lat = data.lat;\n    weatherData.lng = data.lon;\n  };\n\n  const fillWeatherInfo = async (weatherData) => {\n    const data = await WeatherAPI(weatherData, "metric");\n\n    fillCurrentInfo(weatherData.current, data.current);\n    fillHourlyInfo(weatherData.hourly, data.hourly);\n    fillDailyInfo(weatherData.daily, data.daily);\n  };\n\n  const fillCurrentInfo = (current, data) => {\n    current.temp = Math.round(data.temp) + "°";\n    current.desc = data.weather[0].description;\n    current.id = data.weather[0].id;\n    current.humidity = data.humidity;\n    current.feel = data.feels_like;\n    current.windspeed = data.wind_speed;\n  };\n\n  const fillHourlyInfo = (hourly, data) => {\n    for (let i = 1; i < 17; i++) {\n      const info = {\n        temp: Math.round(data[i].temp) + "°",\n        desc: data[i].weather[0].description,\n        pop: Math.round(data[i].pop * 100) + " %",\n        time: convertToHour(data[i].dt),\n        id: data[i].weather[0].id,\n      };\n      hourly.push(info);\n    }\n  };\n\n  const fillDailyInfo = (daily, data) => {\n    for (let i = 1; i < 7; i++) {\n      const info = {\n        temp: Math.round(data[i].temp.day) + "°",\n        max: Math.round(data[i].temp.max),\n        min: Math.round(data[i].temp.min),\n        time: convertToDay(data[i].dt),\n        desc: data[i].weather[0].description,\n        pop: data[i].pop *100 + " %",\n        id: data[i].weather[0].id,\n      };\n\n      daily.push(info);\n    }\n  };\n\n  return { initialiseApp, handleRequest };\n})();\n\n/* harmony default export */ const modules_APP = (APP);\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\ndocument.addEventListener("DOMContentLoaded", modules_APP.initialiseApp);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyYXBwLy4vc3JjL21vZHVsZXMvV2VhdGhlckFQSS5qcz83MjZhIiwid2VicGFjazovL3dlYXRoZXJhcHAvLi9zcmMvbW9kdWxlcy9HZW9jb2RpbmdBUEkuanM/M2VkNCIsIndlYnBhY2s6Ly93ZWF0aGVyYXBwLy4vc3JjL21vZHVsZXMvV2VhdGhlckRhdGEuanM/YTQ4MyIsIndlYnBhY2s6Ly93ZWF0aGVyYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcz84Yzg2Iiwid2VicGFjazovL3dlYXRoZXJhcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcz9mZDNhIiwid2VicGFjazovL3dlYXRoZXJhcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzP2ZlMWYiLCJ3ZWJwYWNrOi8vd2VhdGhlcmFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZnJvbVVuaXhUaW1lL2luZGV4LmpzPzQ2MDIiLCJ3ZWJwYWNrOi8vd2VhdGhlcmFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZ2V0SG91cnMvaW5kZXguanM/ZDNjNiIsIndlYnBhY2s6Ly93ZWF0aGVyYXBwLy4vc3JjL21vZHVsZXMvSWNvbnMuanM/ZGVkMCIsIndlYnBhY2s6Ly93ZWF0aGVyYXBwLy4vc3JjL21vZHVsZXMvaGVscGVyLmpzPzhlMTIiLCJ3ZWJwYWNrOi8vd2VhdGhlcmFwcC8uL3NyYy9tb2R1bGVzL1VJLmpzPzgyYTQiLCJ3ZWJwYWNrOi8vd2VhdGhlcmFwcC8uL3NyYy9tb2R1bGVzL0FQUC5qcz9hNzE1Iiwid2VicGFjazovL3dlYXRoZXJhcHAvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJEQUEyRCxJQUFJLE9BQU8sSUFBSSxTQUFTLE9BQU8sU0FBUyxLQUFLO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaURBQWUsY0FBYyxFQUFDOzs7QUNkOUIsTUFBTSxtQkFBTTs7QUFFRztBQUNmO0FBQ0EsdURBQXVELEtBQUssU0FBUyxtQkFBTSxDQUFDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBOzs7QUNSZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbEJlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsQzs7QUNKeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsYUFBYSxLQUFLO0FBQ2xCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlO0FBQ2YsRUFBRSxZQUFZO0FBQ2Qsd0RBQXdEOztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHVLQUF1Szs7QUFFdks7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQzs7QUNuRGU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQzs7QUNad0M7QUFDVztBQUNNO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmLEVBQUUsWUFBWTtBQUNkLGlCQUFpQixTQUFTO0FBQzFCLFNBQVMsTUFBTTtBQUNmLEM7O0FDN0J3QztBQUNpQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsYUFBYSxPQUFPO0FBQ3BCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZixFQUFFLFlBQVk7QUFDZCxhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBLEM7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUFlLFNBQVMsRUFBQzs7O0FDbkx5QjtBQUNsQjs7QUFFaEM7QUFDQSxlQUFlLFlBQVk7QUFDM0IsYUFBYSxRQUFROztBQUVyQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLEtBQVM7O0FBRS9CO0FBQ0E7O0FBRWdEOzs7QUM5QnJCO0FBQ1c7O0FBRXZCO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU0seUJBQWlCO0FBQ3ZCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQkFBc0IsT0FBTztBQUM3QjtBQUNBO0FBQ0E7OztBQ2hKNkM7QUFDRTtBQUNKO0FBQ3JCO0FBQ29DOztBQUUxRDtBQUNBO0FBQ0EsSUFBSSxjQUFjO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QixNQUFNLGlCQUFpQjtBQUN2QjtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CLElBQUksaUJBQWlCO0FBQ3JCLElBQUksY0FBYztBQUNsQjs7QUFFQTtBQUNBLDRCQUE0QixXQUFXO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixjQUFjOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLFVBQWM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVixDQUFDOztBQUVELGtEQUFlLEdBQUcsRUFBQzs7O0FDekZhOztBQUVoQyw4Q0FBOEMseUJBQWlCIiwiZmlsZSI6IjM1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFQSUtleSA9IFwiZDAwMjUxY2UxMTBkMjVkNDQyNWIyZWVkZTI4YTRhMDlcIjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0V2VhdGhlckluZm8od2VhdGhlckRhdGEsIG1vZGUpIHtcbiAgY29uc3QgbGF0ID0gd2VhdGhlckRhdGEubGF0O1xuICBjb25zdCBsbmcgPSB3ZWF0aGVyRGF0YS5sbmc7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L29uZWNhbGw/bGF0PSR7bGF0fSZsb249JHtsbmd9JmFwcGlkPSR7QVBJS2V5fSZ1bml0cz0ke21vZGV9YFxuICApO1xuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuY29uc29sZS5sb2coZGF0YSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRXZWF0aGVySW5mbztcbiIsImNvbnN0IEFQSUtleSA9IFwiZDAwMjUxY2UxMTBkMjVkNDQyNWIyZWVkZTI4YTRhMDlcIjtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXMoY2l0eSkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgIGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZ2VvLzEuMC9kaXJlY3Q/cT0ke2NpdHl9JmFwcGlkPSR7QVBJS2V5fWBcbiAgKTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgcmV0dXJuIGRhdGFbMF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBXZWF0aGVyRGF0YSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2l0eSA9IFwiXCI7XG4gICAgdGhpcy5jb3VudHkgPSBcIlwiO1xuICAgIHRoaXMubG5nID0gXCJcIjtcbiAgICB0aGlzLmxhdCA9IFwiXCI7XG4gICAgdGhpcy5jdXJyZW50ID0ge1xuICAgICAgdGVtcDogXCJcIixcbiAgICAgIGRlc2M6IFwiXCIsXG4gICAgICBodW1pZGl0eTogXCJcIixcbiAgICAgIGZlZWw6IFwiXCIsXG4gICAgICB3aW5kc3BlZWQ6IFwiXCIsXG4gICAgICByYWluOiBcIlwiLFxuICAgICAgaWQ6IFwiXCIsXG4gICAgfTtcbiAgICB0aGlzLmhvdXJseSA9IFtdO1xuICAgIHRoaXMuZGFpbHkgPSBbXTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBmcm9tVW5peFRpbWVcbiAqIEBjYXRlZ29yeSBUaW1lc3RhbXAgSGVscGVyc1xuICogQHN1bW1hcnkgQ3JlYXRlIGEgZGF0ZSBmcm9tIGEgVW5peCB0aW1lc3RhbXAuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGUgYSBkYXRlIGZyb20gYSBVbml4IHRpbWVzdGFtcC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB1bml4VGltZSAtIHRoZSBnaXZlbiBVbml4IHRpbWVzdGFtcFxuICogQHJldHVybnMge0RhdGV9IHRoZSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIHRoZSBkYXRlIDI5IEZlYnJ1YXJ5IDIwMTIgMTE6NDU6MDU6XG4gKiB2YXIgcmVzdWx0ID0gZnJvbVVuaXhUaW1lKDEzMzA1MTU5MDUpXG4gKiAvLz0+IFdlZCBGZWIgMjkgMjAxMiAxMTo0NTowNVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21Vbml4VGltZShkaXJ0eVVuaXhUaW1lKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgdW5peFRpbWUgPSB0b0ludGVnZXIoZGlydHlVbml4VGltZSk7XG4gIHJldHVybiB0b0RhdGUodW5peFRpbWUgKiAxMDAwKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGdldEhvdXJzXG4gKiBAY2F0ZWdvcnkgSG91ciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGhvdXJzIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBob3VycyBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIGhvdXJzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gR2V0IHRoZSBob3VycyBvZiAyOSBGZWJydWFyeSAyMDEyIDExOjQ1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZ2V0SG91cnMobmV3IERhdGUoMjAxMiwgMSwgMjksIDExLCA0NSkpXG4gKiAvLz0+IDExXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SG91cnMoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gIHJldHVybiBob3Vycztcbn0iLCJjb25zdCBpY29uTmFtZXMgPSB7XG4gIDIwMDogXCJ0aHVuZGVyc3Rvcm1cIixcbiAgMjAxOiBcInRodW5kZXJzdG9ybVwiLFxuICAyMDI6IFwidGh1bmRlcnN0b3JtXCIsXG4gIDIxMDogXCJsaWdodG5pbmdcIixcbiAgMjExOiBcImxpZ2h0bmluZ1wiLFxuICAyMTI6IFwibGlnaHRuaW5nXCIsXG4gIDIyMTogXCJsaWdodG5pbmdcIixcbiAgMjMwOiBcInRodW5kZXJzdG9ybVwiLFxuICAyMzE6IFwidGh1bmRlcnN0b3JtXCIsXG4gIDIzMjogXCJ0aHVuZGVyc3Rvcm1cIixcbiAgMzAwOiBcInNwcmlua2xlXCIsXG4gIDMwMTogXCJzcHJpbmtsZVwiLFxuICAzMDI6IFwicmFpblwiLFxuICAzMTA6IFwicmFpbi1taXhcIixcbiAgMzExOiBcInJhaW5cIixcbiAgMzEyOiBcInJhaW5cIixcbiAgMzEzOiBcInNob3dlcnNcIixcbiAgMzE0OiBcInJhaW5cIixcbiAgMzIxOiBcInNwcmlua2xlXCIsXG4gIDUwMDogXCJzcHJpbmtsZVwiLFxuICA1MDE6IFwicmFpblwiLFxuICA1MDI6IFwicmFpblwiLFxuICA1MDM6IFwicmFpblwiLFxuICA1MDQ6IFwicmFpblwiLFxuICA1MTE6IFwicmFpbi1taXhcIixcbiAgNTIwOiBcInNob3dlcnNcIixcbiAgNTIxOiBcInNob3dlcnNcIixcbiAgNTIyOiBcInNob3dlcnNcIixcbiAgNTMxOiBcInN0b3JtLXNob3dlcnNcIixcbiAgNjAwOiBcInNub3dcIixcbiAgNjAxOiBcInNub3dcIixcbiAgNjAyOiBcInNsZWV0XCIsXG4gIDYxMTogXCJyYWluLW1peFwiLFxuICA2MTI6IFwicmFpbi1taXhcIixcbiAgNjE1OiBcInJhaW4tbWl4XCIsXG4gIDYxNjogXCJyYWluLW1peFwiLFxuICA2MjA6IFwicmFpbi1taXhcIixcbiAgNjIxOiBcInNub3dcIixcbiAgNjIyOiBcInNub3dcIixcbiAgNzAxOiBcInNob3dlcnNcIixcbiAgNzExOiBcInNtb2tlXCIsXG4gIDcyMTogXCJkYXktaGF6ZVwiLFxuICA3MzE6IFwiZHVzdFwiLFxuICA3NDE6IFwiZm9nXCIsXG4gIDc2MTogXCJkdXN0XCIsXG4gIDc2MjogXCJkdXN0XCIsXG4gIDc3MTogXCJkYXktY2xvdWR5LWd1c3RzXCIsXG4gIDc4MTogXCJ0b3JuYWRvXCIsXG4gIDgwMDogXCJkYXktc3VubnlcIixcbiAgODAxOiBcImRheS1jbG91ZHktZ3VzdHNcIixcbiAgODAyOiBcImRheS1jbG91ZHktZ3VzdHNcIixcbiAgODAzOiBcImRheS1jbG91ZHktZ3VzdHNcIixcbiAgODA0OiBcImRheS1jbG91ZHlcIixcbiAgOTAwOiBcInRvcm5hZG9cIixcbiAgOTAxOiBcInN0b3JtLXNob3dlcnNcIixcbiAgOTAyOiBcImh1cnJpY2FuZVwiLFxuICA5MDM6IFwic25vd2ZsYWtlLWNvbGRcIixcbiAgOTA0OiBcImhvdFwiLFxuICA5MDU6IFwid2luZHlcIixcbiAgOTA2OiBcImhhaWxcIixcbiAgOTU3OiBcInN0cm9uZy13aW5kXCIsXG4gIGRheTIwMTogXCJkYXktdGh1bmRlcnN0b3JtXCIsXG4gIGRheTIwMjogXCJkYXktdGh1bmRlcnN0b3JtXCIsXG4gIGRheTIxMDogXCJkYXktbGlnaHRuaW5nXCIsXG4gIGRheTIxMTogXCJkYXktbGlnaHRuaW5nXCIsXG4gIGRheTIxMjogXCJkYXktbGlnaHRuaW5nXCIsXG4gIGRheTIyMTogXCJkYXktbGlnaHRuaW5nXCIsXG4gIGRheTIzMDogXCJkYXktdGh1bmRlcnN0b3JtXCIsXG4gIGRheTIzMTogXCJkYXktdGh1bmRlcnN0b3JtXCIsXG4gIGRheTIzMjogXCJkYXktdGh1bmRlcnN0b3JtXCIsXG4gIGRheTMwMDogXCJkYXktc3ByaW5rbGVcIixcbiAgZGF5MzAxOiBcImRheS1zcHJpbmtsZVwiLFxuICBkYXkzMDI6IFwiZGF5LXJhaW5cIixcbiAgZGF5MzEwOiBcImRheS1yYWluXCIsXG4gIGRheTMxMTogXCJkYXktcmFpblwiLFxuICBkYXkzMTI6IFwiZGF5LXJhaW5cIixcbiAgZGF5MzEzOiBcImRheS1yYWluXCIsXG4gIGRheTMxNDogXCJkYXktcmFpblwiLFxuICBkYXkzMjE6IFwiZGF5LXNwcmlua2xlXCIsXG4gIGRheTUwMDogXCJkYXktc3ByaW5rbGVcIixcbiAgZGF5NTAxOiBcImRheS1yYWluXCIsXG4gIGRheTUwMjogXCJkYXktcmFpblwiLFxuICBkYXk1MDM6IFwiZGF5LXJhaW5cIixcbiAgZGF5NTA0OiBcImRheS1yYWluXCIsXG4gIGRheTUxMTogXCJkYXktcmFpbi1taXhcIixcbiAgZGF5NTIwOiBcImRheS1zaG93ZXJzXCIsXG4gIGRheTUyMTogXCJkYXktc2hvd2Vyc1wiLFxuICBkYXk1MjI6IFwiZGF5LXNob3dlcnNcIixcbiAgZGF5NTMxOiBcImRheS1zdG9ybS1zaG93ZXJzXCIsXG4gIGRheTYwMDogXCJkYXktc25vd1wiLFxuICBkYXk2MDE6IFwiZGF5LXNsZWV0XCIsXG4gIGRheTYwMjogXCJkYXktc25vd1wiLFxuICBkYXk2MTE6IFwiZGF5LXJhaW4tbWl4XCIsXG4gIGRheTYxMjogXCJkYXktcmFpbi1taXhcIixcbiAgZGF5NjE1OiBcImRheS1yYWluLW1peFwiLFxuICBkYXk2MTY6IFwiZGF5LXJhaW4tbWl4XCIsXG4gIGRheTYyMDogXCJkYXktcmFpbi1taXhcIixcbiAgZGF5NjIxOiBcImRheS1zbm93XCIsXG4gIGRheTYyMjogXCJkYXktc25vd1wiLFxuICBkYXk3MDE6IFwiZGF5LXNob3dlcnNcIixcbiAgZGF5NzExOiBcInNtb2tlXCIsXG4gIGRheTcyMTogXCJkYXktaGF6ZVwiLFxuICBkYXk3MzE6IFwiZHVzdFwiLFxuICBkYXk3NDE6IFwiZGF5LWZvZ1wiLFxuICBkYXk3NjE6IFwiZHVzdFwiLFxuICBkYXk3NjI6IFwiZHVzdFwiLFxuICBkYXk3ODE6IFwidG9ybmFkb1wiLFxuICBkYXk4MDA6IFwiZGF5LXN1bm55XCIsXG4gIGRheTgwMTogXCJkYXktY2xvdWR5LWd1c3RzXCIsXG4gIGRheTgwMjogXCJkYXktY2xvdWR5LWd1c3RzXCIsXG4gIGRheTgwMzogXCJkYXktY2xvdWR5LWd1c3RzXCIsXG4gIGRheTgwNDogXCJkYXktc3Vubnktb3ZlcmNhc3RcIixcbiAgZGF5OTAwOiBcInRvcm5hZG9cIixcbiAgZGF5OTAyOiBcImh1cnJpY2FuZVwiLFxuICBkYXk5MDM6IFwic25vd2ZsYWtlLWNvbGRcIixcbiAgZGF5OTA0OiBcImhvdFwiLFxuICBkYXk5MDY6IFwiZGF5LWhhaWxcIixcbiAgZGF5OTU3OiBcInN0cm9uZy13aW5kXCIsXG4gIG5pZ2h0MjAwOiBcIm5pZ2h0LWFsdC10aHVuZGVyc3Rvcm1cIixcbiAgbmlnaHQyMDE6IFwibmlnaHQtYWx0LXRodW5kZXJzdG9ybVwiLFxuICBuaWdodDIwMjogXCJuaWdodC1hbHQtdGh1bmRlcnN0b3JtXCIsXG4gIG5pZ2h0MjEwOiBcIm5pZ2h0LWFsdC1saWdodG5pbmdcIixcbiAgbmlnaHQyMTE6IFwibmlnaHQtYWx0LWxpZ2h0bmluZ1wiLFxuICBuaWdodDIxMjogXCJuaWdodC1hbHQtbGlnaHRuaW5nXCIsXG4gIG5pZ2h0MjIxOiBcIm5pZ2h0LWFsdC1saWdodG5pbmdcIixcbiAgbmlnaHQyMzA6IFwibmlnaHQtYWx0LXRodW5kZXJzdG9ybVwiLFxuICBuaWdodDIzMTogXCJuaWdodC1hbHQtdGh1bmRlcnN0b3JtXCIsXG4gIG5pZ2h0MjMyOiBcIm5pZ2h0LWFsdC10aHVuZGVyc3Rvcm1cIixcbiAgbmlnaHQzMDA6IFwibmlnaHQtYWx0LXNwcmlua2xlXCIsXG4gIG5pZ2h0MzAxOiBcIm5pZ2h0LWFsdC1zcHJpbmtsZVwiLFxuICBuaWdodDMwMjogXCJuaWdodC1hbHQtcmFpblwiLFxuICBuaWdodDMxMDogXCJuaWdodC1hbHQtcmFpblwiLFxuICBuaWdodDMxMTogXCJuaWdodC1hbHQtcmFpblwiLFxuICBuaWdodDMxMjogXCJuaWdodC1hbHQtcmFpblwiLFxuICBuaWdodDMxMzogXCJuaWdodC1hbHQtcmFpblwiLFxuICBuaWdodDMxNDogXCJuaWdodC1hbHQtcmFpblwiLFxuICBuaWdodDMyMTogXCJuaWdodC1hbHQtc3ByaW5rbGVcIixcbiAgbmlnaHQ1MDA6IFwibmlnaHQtYWx0LXNwcmlua2xlXCIsXG4gIG5pZ2h0NTAxOiBcIm5pZ2h0LWFsdC1yYWluXCIsXG4gIG5pZ2h0NTAyOiBcIm5pZ2h0LWFsdC1yYWluXCIsXG4gIG5pZ2h0NTAzOiBcIm5pZ2h0LWFsdC1yYWluXCIsXG4gIG5pZ2h0NTA0OiBcIm5pZ2h0LWFsdC1yYWluXCIsXG4gIG5pZ2h0NTExOiBcIm5pZ2h0LWFsdC1yYWluLW1peFwiLFxuICBuaWdodDUyMDogXCJuaWdodC1hbHQtc2hvd2Vyc1wiLFxuICBuaWdodDUyMTogXCJuaWdodC1hbHQtc2hvd2Vyc1wiLFxuICBuaWdodDUyMjogXCJuaWdodC1hbHQtc2hvd2Vyc1wiLFxuICBuaWdodDUzMTogXCJuaWdodC1hbHQtc3Rvcm0tc2hvd2Vyc1wiLFxuICBuaWdodDYwMDogXCJuaWdodC1hbHQtc25vd1wiLFxuICBuaWdodDYwMTogXCJuaWdodC1hbHQtc2xlZXRcIixcbiAgbmlnaHQ2MDI6IFwibmlnaHQtYWx0LXNub3dcIixcbiAgbmlnaHQ2MTE6IFwibmlnaHQtYWx0LXJhaW4tbWl4XCIsXG4gIG5pZ2h0NjEyOiBcIm5pZ2h0LWFsdC1yYWluLW1peFwiLFxuICBuaWdodDYxNTogXCJuaWdodC1hbHQtcmFpbi1taXhcIixcbiAgbmlnaHQ2MTY6IFwibmlnaHQtYWx0LXJhaW4tbWl4XCIsXG4gIG5pZ2h0NjIwOiBcIm5pZ2h0LWFsdC1yYWluLW1peFwiLFxuICBuaWdodDYyMTogXCJuaWdodC1hbHQtc25vd1wiLFxuICBuaWdodDYyMjogXCJuaWdodC1hbHQtc25vd1wiLFxuICBuaWdodDcwMTogXCJuaWdodC1hbHQtc2hvd2Vyc1wiLFxuICBuaWdodDcxMTogXCJzbW9rZVwiLFxuICBuaWdodDcyMTogXCJkYXktaGF6ZVwiLFxuICBuaWdodDczMTogXCJkdXN0XCIsXG4gIG5pZ2h0NzQxOiBcIm5pZ2h0LWZvZ1wiLFxuICBuaWdodDc2MTogXCJkdXN0XCIsXG4gIG5pZ2h0NzYyOiBcImR1c3RcIixcbiAgbmlnaHQ3ODE6IFwidG9ybmFkb1wiLFxuICBuaWdodDgwMDogXCJuaWdodC1jbGVhclwiLFxuICBuaWdodDgwMTogXCJuaWdodC1hbHQtY2xvdWR5LWd1c3RzXCIsXG4gIG5pZ2h0ODAyOiBcIm5pZ2h0LWFsdC1jbG91ZHktZ3VzdHNcIixcbiAgbmlnaHQ4MDM6IFwibmlnaHQtYWx0LWNsb3VkeS1ndXN0c1wiLFxuICBuaWdodDgwNDogXCJuaWdodC1hbHQtY2xvdWR5XCIsXG4gIG5pZ2h0OTAwOiBcInRvcm5hZG9cIixcbiAgbmlnaHQ5MDI6IFwiaHVycmljYW5lXCIsXG4gIG5pZ2h0OTAzOiBcInNub3dmbGFrZS1jb2xkXCIsXG4gIG5pZ2h0OTA0OiBcImhvdFwiLFxuICBuaWdodDkwNjogXCJuaWdodC1hbHQtaGFpbFwiLFxuICBuaWdodDk1NzogXCJzdHJvbmctd2luZFwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgaWNvbk5hbWVzO1xuIiwiaW1wb3J0IHsgZnJvbVVuaXhUaW1lLCBnZXRIb3VycyB9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IGljb25zTmFtZSBmcm9tIFwiLi9JY29uc1wiO1xuXG5mdW5jdGlvbiBjb252ZXJ0VG9Ib3VyKHVuaXgpIHtcbiAgY29uc3QgZGF0ZSA9IGZyb21Vbml4VGltZSh1bml4KTtcbiAgbGV0IGhvdXIgPSBnZXRIb3VycyhkYXRlKTtcblxuICBpZiAoaG91ciA8IDEyKSB7XG4gICAgaG91ciA9IGhvdXIgKyBcIiBhbVwiO1xuICB9IGVsc2Uge1xuICAgIGhvdXIgPSBob3VyICsgXCIgcG1cIjtcbiAgfVxuXG4gIHJldHVybiBob3VyO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0VG9EYXkodW5peCkge1xuICBjb25zdCBkYXRlID0gZnJvbVVuaXhUaW1lKHVuaXgpO1xuICBjb25zdCBkYXkgPSBkYXRlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDMpO1xuICByZXR1cm4gZGF5O1xufVxuXG5mdW5jdGlvbiBnZXRJY29uKGRhdGEpIHtcbiAgY29uc3QgcHJlZml4ID0gXCJ3aS1cIjtcbiAgbGV0IGljb25OYW1lID0gZGF0YS5pZDtcbiAgbGV0IGljb24gPSBwcmVmaXggKyBpY29uc05hbWVbaWNvbk5hbWVdO1xuXG4gIHJldHVybiBpY29uO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0VG9Ib3VyLCBjb252ZXJ0VG9EYXksIGdldEljb24gfTtcbiIsImltcG9ydCBBUFAgZnJvbSBcIi4vQVBQLmpzXCI7XG5pbXBvcnQgeyBnZXRJY29uIH0gZnJvbSBcIi4vaGVscGVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJIHtcbiAgd2VhdGhlckRhdGEgPSBcIlwiO1xuXG4gIHN0YXRpYyBpbml0QnV0dG9ucygpIHtcbiAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZW1wRGl2XCIpO1xuICAgIGNvbnN0IGNpdHlEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNpdHlcIik7XG4gICAgY29uc3Qgc2VhcmNoSWNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VhcmNoSWNvblwiKTtcbiAgICBjb25zdCBob3VybHlCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhvdXJseUJ0blwiKTtcbiAgICBjb25zdCB3ZWVrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3ZWVrQnRuXCIpO1xuXG4gICAgdGVtcERpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgVUkuc2hvd1NlYXJjaEJhcik7XG4gICAgY2l0eURpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgVUkuc2hvd1NlYXJjaEJhcik7XG4gICAgc2VhcmNoSWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgQVBQLmhhbmRsZVJlcXVlc3QoKTtcbiAgICB9KTtcbiAgICBkYXlCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIFVJLmZpbGxIb3VybHlEYXRhKFVJLndlYXRoZXJEYXRhKTtcbiAgICAgIFVJLmFjdGl2YXRlQnRuKFwiaG91cmx5XCIpO1xuICAgIH0pO1xuICAgIHdlZWtCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIFVJLmZpbGxEYWlseURhdGEoVUkud2VhdGhlckRhdGEpO1xuICAgICAgVUkuYWN0aXZhdGVCdG4oXCJkYWlseVwiKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBzaG93U2VhcmNoQmFyKCkge1xuICAgIGNvbnN0IHNlYXJjaEJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5wdXREaXZcIik7XG4gICAgaWYgKHNlYXJjaEJhci5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpIHtcbiAgICAgIFVJLmNsb3NlU2VhcmNoQmFyKCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlYXJjaEJhci5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjbG9zZVNlYXJjaEJhcigpIHtcbiAgICBjb25zdCBzZWFyY2hCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmlucHV0RGl2XCIpO1xuXG4gICAgc2VhcmNoQmFyLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gIH1cblxuICBzdGF0aWMgY29weUNpdHkoKSB7XG4gICAgY29uc3QgY2l0eUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaXR5SW5wdXRcIik7XG5cbiAgICByZXR1cm4gY2l0eUlucHV0LnZhbHVlO1xuICB9XG5cbiAgc3RhdGljIGZpbGxNYWluRGF0YShkYXRhKSB7XG4gICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpblRlbXBcIik7XG4gICAgY29uc3QgY2l0eURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2l0eVwiKTtcbiAgICBjb25zdCBjb3VudHJ5RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb3VudHJ5XCIpO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXNjXCIpO1xuICAgIGNvbnN0IHRlbXBJY29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluVGVtcEljb25cIik7XG5cbiAgICBjaXR5RGl2LnRleHRDb250ZW50ID0gZGF0YS5jaXR5O1xuICAgIGNvdW50cnlEaXYudGV4dENvbnRlbnQgPSBkYXRhLmNvdW50cnk7XG4gICAgdGVtcERpdi50ZXh0Q29udGVudCA9IGRhdGEuY3VycmVudC50ZW1wO1xuICAgIGRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gZGF0YS5jdXJyZW50LmRlc2M7XG5cbiAgICBVSS5jaGFuZ2VJY29uKHRlbXBJY29uLCBkYXRhLmN1cnJlbnQpO1xuICB9XG5cbiAgc3RhdGljIGZpbGxIb3VybHlEYXRhKGRhdGEpIHtcbiAgICBjb25zdCBpbmZvUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9QYW5lbFwiKTtcbiAgICBpbmZvUGFuZWwuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgbGV0IGhvdXJseUluZm9EaXYgPSBVSS5jcmVhdGVJbmZvUGFuZWxEaXYoZGF0YS5ob3VybHlbaV0pO1xuICAgICAgaWYgKGkgJSAyID09IDApIHtcbiAgICAgICAgaG91cmx5SW5mb0Rpdi5jbGFzc0xpc3QuYWRkKFwiZGFya2VySW5mb0RpdlwiKTtcbiAgICAgIH1cbiAgICAgIGluZm9QYW5lbC5hcHBlbmRDaGlsZChob3VybHlJbmZvRGl2KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZmlsbERhaWx5RGF0YShkYXRhKSB7XG4gICAgY29uc3QgaW5mb1BhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvUGFuZWxcIik7XG4gICAgaW5mb1BhbmVsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgIGxldCBkYWlseUluZm9EaXYgPSBVSS5jcmVhdGVJbmZvUGFuZWxEaXYoZGF0YS5kYWlseVtpXSk7XG4gICAgICBpZiAoaSAlIDIgPT0gMCkge1xuICAgICAgICBkYWlseUluZm9EaXYuY2xhc3NMaXN0LmFkZChcImRhcmtlckluZm9EaXZcIik7XG4gICAgICB9XG4gICAgICBVSS5maWxsTWluTWF4KGRhaWx5SW5mb0RpdiwgZGF0YS5kYWlseVtpXSk7XG4gICAgICBpbmZvUGFuZWwuYXBwZW5kQ2hpbGQoZGFpbHlJbmZvRGl2KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlSW5mb1BhbmVsRGl2KGRhdGEpIHtcbiAgICBjb25zdCB3ZWF0aGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCB0aW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBpbmZvUGFuZWxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IG1haW5UZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBtaW5tYXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IHdlYXRoZXJJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gICAgY29uc3QgcG9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgIHdlYXRoZXJEaXYuY2xhc3NMaXN0LmFkZChcIndlYXRoZXJEaXZcIik7XG4gICAgdGltZURpdi5jbGFzc0xpc3QuYWRkKFwidGltZURpdlwiKTtcbiAgICBpbmZvUGFuZWxEaXYuY2xhc3NMaXN0LmFkZChcImluZm9QYW5lbFRlbXBcIik7XG4gICAgbWlubWF4LmNsYXNzTGlzdC5hZGQoXCJtaW5tYXhcIik7XG4gICAgbWFpblRlbXAuY2xhc3NMaXN0LmFkZChcInRlbXBcIik7XG4gICAgd2VhdGhlckljb24uaWQgPSBcInRlbXBJY29uXCI7XG4gICAgVUkuY2hhbmdlSWNvbih3ZWF0aGVySWNvbiwgZGF0YSk7XG4gICAgcG9wLmNsYXNzTGlzdC5hZGQoXCJwb3BcIik7XG5cbiAgICB0aW1lRGl2LnRleHRDb250ZW50ID0gZGF0YS50aW1lO1xuICAgIG1haW5UZW1wLnRleHRDb250ZW50ID0gZGF0YS50ZW1wO1xuICAgIHBvcC50ZXh0Q29udGVudCA9IGRhdGEucG9wO1xuXG4gICAgaW5mb1BhbmVsRGl2LmFwcGVuZChtYWluVGVtcCwgbWlubWF4KTtcbiAgICB3ZWF0aGVyRGl2LmFwcGVuZCh0aW1lRGl2LCBpbmZvUGFuZWxEaXYsIHdlYXRoZXJJY29uLCBwb3ApO1xuXG4gICAgcmV0dXJuIHdlYXRoZXJEaXY7XG4gIH1cblxuICBzdGF0aWMgZmlsbE1pbk1heChkaXYsIGRhdGEpIHtcbiAgICBjb25zdCBtRGl2ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoXCIubWlubWF4XCIpO1xuXG4gICAgbURpdi50ZXh0Q29udGVudCA9IGRhdGEubWluICsgXCIgLyBcIiArIGRhdGEubWF4O1xuICB9XG5cbiAgc3RhdGljIGFjdGl2YXRlQnRuKGJ0bikge1xuICAgIGNvbnN0IGFjdGl2ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWN0aXZlT3B0aW9uXCIpO1xuICAgIGFjdGl2ZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlT3B0aW9uXCIpO1xuXG4gICAgaWYgKGJ0biA9PSBcImhvdXJseVwiKSB7XG4gICAgICBjb25zdCBkYXlCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRheUJ0blwiKTtcbiAgICAgIGRheUJ0bi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlT3B0aW9uXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB3ZWVrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3ZWVrQnRuXCIpO1xuICAgICAgd2Vla0J0bi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlT3B0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjaGFuZ2VJY29uKGljb25EaXYsIGRhdGEpIHtcbiAgICBpY29uRGl2LmNsYXNzTmFtZSA9IFwiXCI7XG5cbiAgICBjb25zdCBjbGFzc05hbWUgPSBnZXRJY29uKGRhdGEpLnRvU3RyaW5nKCk7XG4gICAgaWNvbkRpdi5jbGFzc0xpc3QuYWRkKFwid2lcIiwgY2xhc3NOYW1lKTtcbiAgfVxufVxuIiwiaW1wb3J0IGdldFdlYXRoZXJJbmZvIGZyb20gXCIuL1dlYXRoZXJBUEkuanNcIjtcbmltcG9ydCBnZXRDb29yZGluYXRlcyBmcm9tIFwiLi9HZW9jb2RpbmdBUEkuanNcIjtcbmltcG9ydCBXZWF0aGVyRGF0YSBmcm9tIFwiLi9XZWF0aGVyRGF0YS5qc1wiO1xuaW1wb3J0IFVJIGZyb20gXCIuL1VJXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9Ib3VyLCBjb252ZXJ0VG9EYXkgfSBmcm9tIFwiLi9oZWxwZXIuanNcIjtcblxuY29uc3QgQVBQID0gKCgpID0+IHtcbiAgY29uc3QgaW5pdGlhbGlzZUFwcCA9ICgpID0+IHtcbiAgICBVSS5pbml0QnV0dG9ucygpO1xuICAgIGhhbmRsZVJlcXVlc3QoXCJCb2NodW1cIik7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUmVxdWVzdCA9IGFzeW5jIChjaXR5KSA9PiB7XG4gICAgaWYgKGNpdHkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjaXR5ID0gVUkuY29weUNpdHkoKTtcbiAgICAgIFVJLmNsb3NlU2VhcmNoQmFyKCk7XG4gICAgfVxuICAgIGNvbnN0IHdlYXRoZXJEYXRhID0gYXdhaXQgY3JlYXRlV2VhdGhlck9iamVjdChjaXR5KTtcbiAgICBVSS5maWxsTWFpbkRhdGEod2VhdGhlckRhdGEpO1xuICAgIFVJLmZpbGxIb3VybHlEYXRhKHdlYXRoZXJEYXRhKTtcbiAgICBVSS53ZWF0aGVyRGF0YSA9IHdlYXRoZXJEYXRhO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZVdlYXRoZXJPYmplY3QgPSBhc3luYyAoY2l0eSkgPT4ge1xuICAgIGNvbnN0IHdlYXRoZXJEYXRhID0gbmV3IFdlYXRoZXJEYXRhKCk7XG4gICAgYXdhaXQgZmlsbEdlb0NvZGluZ0luZm8od2VhdGhlckRhdGEsIGNpdHkpO1xuICAgIGF3YWl0IGZpbGxXZWF0aGVySW5mbyh3ZWF0aGVyRGF0YSk7XG5cbiAgICByZXR1cm4gd2VhdGhlckRhdGE7XG4gIH07XG5cbiAgY29uc3QgZmlsbEdlb0NvZGluZ0luZm8gPSBhc3luYyAod2VhdGhlckRhdGEsIGNpdHkpID0+IHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0Q29vcmRpbmF0ZXMoY2l0eSk7XG5cbiAgICB3ZWF0aGVyRGF0YS5jaXR5ID0gZGF0YS5uYW1lO1xuICAgIHdlYXRoZXJEYXRhLmNvdW50cnkgPSBcIiAoXCIgKyBkYXRhLmNvdW50cnkgKyBcIilcIjtcbiAgICB3ZWF0aGVyRGF0YS5sYXQgPSBkYXRhLmxhdDtcbiAgICB3ZWF0aGVyRGF0YS5sbmcgPSBkYXRhLmxvbjtcbiAgfTtcblxuICBjb25zdCBmaWxsV2VhdGhlckluZm8gPSBhc3luYyAod2VhdGhlckRhdGEpID0+IHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0V2VhdGhlckluZm8od2VhdGhlckRhdGEsIFwibWV0cmljXCIpO1xuXG4gICAgZmlsbEN1cnJlbnRJbmZvKHdlYXRoZXJEYXRhLmN1cnJlbnQsIGRhdGEuY3VycmVudCk7XG4gICAgZmlsbEhvdXJseUluZm8od2VhdGhlckRhdGEuaG91cmx5LCBkYXRhLmhvdXJseSk7XG4gICAgZmlsbERhaWx5SW5mbyh3ZWF0aGVyRGF0YS5kYWlseSwgZGF0YS5kYWlseSk7XG4gIH07XG5cbiAgY29uc3QgZmlsbEN1cnJlbnRJbmZvID0gKGN1cnJlbnQsIGRhdGEpID0+IHtcbiAgICBjdXJyZW50LnRlbXAgPSBNYXRoLnJvdW5kKGRhdGEudGVtcCkgKyBcIsKwXCI7XG4gICAgY3VycmVudC5kZXNjID0gZGF0YS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uO1xuICAgIGN1cnJlbnQuaWQgPSBkYXRhLndlYXRoZXJbMF0uaWQ7XG4gICAgY3VycmVudC5odW1pZGl0eSA9IGRhdGEuaHVtaWRpdHk7XG4gICAgY3VycmVudC5mZWVsID0gZGF0YS5mZWVsc19saWtlO1xuICAgIGN1cnJlbnQud2luZHNwZWVkID0gZGF0YS53aW5kX3NwZWVkO1xuICB9O1xuXG4gIGNvbnN0IGZpbGxIb3VybHlJbmZvID0gKGhvdXJseSwgZGF0YSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTc7IGkrKykge1xuICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgdGVtcDogTWF0aC5yb3VuZChkYXRhW2ldLnRlbXApICsgXCLCsFwiLFxuICAgICAgICBkZXNjOiBkYXRhW2ldLndlYXRoZXJbMF0uZGVzY3JpcHRpb24sXG4gICAgICAgIHBvcDogTWF0aC5yb3VuZChkYXRhW2ldLnBvcCAqIDEwMCkgKyBcIiAlXCIsXG4gICAgICAgIHRpbWU6IGNvbnZlcnRUb0hvdXIoZGF0YVtpXS5kdCksXG4gICAgICAgIGlkOiBkYXRhW2ldLndlYXRoZXJbMF0uaWQsXG4gICAgICB9O1xuICAgICAgaG91cmx5LnB1c2goaW5mbyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGZpbGxEYWlseUluZm8gPSAoZGFpbHksIGRhdGEpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IDc7IGkrKykge1xuICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgdGVtcDogTWF0aC5yb3VuZChkYXRhW2ldLnRlbXAuZGF5KSArIFwiwrBcIixcbiAgICAgICAgbWF4OiBNYXRoLnJvdW5kKGRhdGFbaV0udGVtcC5tYXgpLFxuICAgICAgICBtaW46IE1hdGgucm91bmQoZGF0YVtpXS50ZW1wLm1pbiksXG4gICAgICAgIHRpbWU6IGNvbnZlcnRUb0RheShkYXRhW2ldLmR0KSxcbiAgICAgICAgZGVzYzogZGF0YVtpXS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLFxuICAgICAgICBwb3A6IGRhdGFbaV0ucG9wICoxMDAgKyBcIiAlXCIsXG4gICAgICAgIGlkOiBkYXRhW2ldLndlYXRoZXJbMF0uaWQsXG4gICAgICB9O1xuXG4gICAgICBkYWlseS5wdXNoKGluZm8pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4geyBpbml0aWFsaXNlQXBwLCBoYW5kbGVSZXF1ZXN0IH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBBUFA7XG4iLCJpbXBvcnQgQVBQIGZyb20gXCIuL21vZHVsZXMvQVBQXCI7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIEFQUC5pbml0aWFsaXNlQXBwKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///355\n')}},__webpack_exports__={};__webpack_modules__[355]()})();